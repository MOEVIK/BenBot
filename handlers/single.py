from datetime import datetime

from aiogram import Router, F, types
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, ReactionTypeCustomEmoji, ReactionTypeEmoji, InputSticker

# from aiogram.enums import ChatType
# from aiogram.utils.chat_member import ADMINS

from create_bot import bot

from config import BotConfig, Users

from dotenv import load_dotenv
import os

#from db_handler.db_class import PostgresHandler

# –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
load_dotenv()
# TOKEN = os.getenv('TOKEN')  # –í–µ—Ä–Ω–µ—Ç 'localhost'
# TIMEZONE = os.getenv('TIMEZONE')
TARGET_USERNAMES =  os.getenv('BENTARGETS')
ADMINSTRATOR =  os.getenv('ADMINSTRATORS')
EMOJI_ID =  os.getenv('EMOJI_ID')

start_router = Router()


ACTIVE = False

# /start
@start_router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer('–í—ã –ë—ç–Ω!')

# /id
# @start_router.message(F.text == 'id')
# async def get_user_id(message: types.Message):
#     await message.answer(f"Your ID: {message.from_user.id}")


@start_router.message()
async def react_to_target_user(message: types.Message):
    print(f"Who: {message.from_user.full_name}\nWhen: {datetime.now()}")
    if BotConfig.ACTIVE and (message.from_user.full_name in TARGET_USERNAMES) :
        try:
            await bot.set_message_reaction(
                chat_id=message.chat.id,
                message_id=message.message_id,
                reaction=[ReactionTypeEmoji(emoji="ü§°")], #ü§° üòê üòÅ üëé ‚òùÔ∏è üëâ
                #reaction=[ReactionTypeCustomEmoji(custom_emoji_id=EMOJI_ID)],
                #reaction=[CustomEmoji(custom_emoji_id="5289947829337353886")],
                is_big=False
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ–±–µ: {e}")

        """–û—Ç–≤–µ—Ç–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–º —Å—Ç–∏–∫–µ—Ä–æ–º (—ç–º–æ–¥–∑–∏)"""
        # combo_text = f"<tg-emoji emoji-id=\"5289947829337353886\">üòê</tg-emoji>üëâ"
        try:
            await bot.send_sticker(
                chat_id=message.chat.id,
                sticker=InputSticker(

                    sticker=EMOJI_ID,
                    emoji_list=["üòê"]  # –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ª—é–±–æ–π —ç–º–æ–¥–∑–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                ),
                reply_to_message_id=message.message_id
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ–±–µ: {e}")

    elif message.from_user.full_name in ADMINSTRATOR:
        print(f"Message: {message.text}\nWhen: {datetime.now()}")
        if '–ë–ï–ó–ó–õ–û–ë–ò–ï' in message.text:
            BotConfig.ACTIVE = True
            await message.answer(f"–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ë–≠–ù–ê!")
        elif '–•–†–Æ–ö–û–°–¢–Ø–ì' in message.text:
            BotConfig.ACTIVE = False
            await message.answer(f"–ù—É –ø—Ä–æ–ë–≠–ù–∏—à—å—Å—è –∑–∞—Ö–æ–¥–∏...")

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–ª–æ–≤–∏—Ç –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–∞—Ö)
# @start_router.message()
# async def debug_all_group_messages(message: types.Message):
#     print(f"–ì—Ä—É–ø–ø–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}: {message.text}")